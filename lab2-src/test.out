ampersand.c=====================================================================

void inc(long* a) {
	a[0] = a[0]+1;
}

void
main()
{
	long a;
	a = 8;
	printf("a=%d\n", a);
	inc(&a);
	printf("a=%d\n", a);
}
Program compiled Successfully!
and.c===========================================================================

void main()
{
	printf("0 && 0 = %d\n", 0 && 0);
	printf("0 && 1 = %d\n", 0 && 1);
	printf("1 && 0 = %d\n", 1 && 0);
	printf("1 && 1 = %d\n", 1 && 1);
}
Program compiled Successfully!
args.c==========================================================================

void compute(long a, long b)
{
	printf("a=%d b=%d\n", a, b);
}

void main()
{
	compute(6, 7);
}

Program compiled Successfully!
array.c=========================================================================

void main()
{
	
	long* a;
	a = malloc(8*20);
	
	a[8]=9;
	printf("a[8]=%d\n", a[8]);
	
}
  
Program compiled Successfully!
array2.c========================================================================

void main()
{
	
	long* a;
	long i;

	a = malloc(8*20);

	for (i = 0; i < 20; i=i+1) {
		a[i]= 3*i;
	}

	printf("Ok so far\n");
	     
	for (i = 0; i < 20; i=i+1) {
		printf("%d: %d\n", i, a[i]);
	}
	
}
  
Program compiled Successfully!
break.c=========================================================================

long i;

void main()
{
	for (i=0; i<15; i= i+1) {
		if (i==5) {
			break;
		}
		printf("i=%d\n", i);
	}
	printf("for i=%d\n", i);

	i = 0;
	while ( i<15) {
		printf("i=%d\n", i);

		if (i==8) {
			break;
		}
		
		i = i+1;
	}
	printf("while i=%d\n", i);
	
	i = 0;
	do {
		printf("i=%d\n", i);

		if (i==10) {
			break;
		}
		
		i = i+1;
	}
	while (i<15);
	
	printf("do/while i=%d\n", i);
	
	printf("OK\n");
}

Program compiled Successfully!
bubblesort.c====================================================================

long mysort(long n, long* a) {
	long i;
	long j;
	long tmp;
	for (i = n - 1; i>0; i = i - 1) {
		for (j = 0; j<i;j=j+1) {
			if (a[j]>a[j+1]) {
				tmp = a[j];
				a[j]=a[j+1];
				a[j+1]=tmp;
			}
		}
	}
}

void printArray(char* s, long n, long* a) {
	long i;
	printf("----------- %s -----------\n", s);
	for (i = 0; i < n; i = i+1) {
		printf("%d\n", a[i]);
	}
}

void main()
{
	long n;
	n = 10;
	
	long* a;
	a = malloc(n*8);

	a[0] = 8;
	a[1] = 7;
	a[2] = 1;
	a[3] = 9;
	a[4] = 11;
	a[5] = 83;
	a[6] = 7;
	a[7] = 13;
	a[8] = 94;
	a[9] = 1;

	printArray("Before", n, a);
	mysort( n, a);
	printArray("After", n, a);
}
Program compiled Successfully!
char.c==========================================================================

char* g;

void main()
{
	char* h;
	h = "Hello world";

	printf("h[6]=%c\n", h[6]);

	g = "This is a great class!!";

	printf("g[11]=%c\n", g[11]);
}

Program compiled Successfully!
char2.c=========================================================================

char* g;

void main()
{
	char* h;
	h = malloc(20);
	h[0]=65;
	h[1]=66;
	h[2]=67;
	h[3]=0;
	printf("h=%s\n", h);

	g = malloc(20);
	g[0]=68;
	g[1]=69;
	g[2]=70;
	g[3]=0;
	printf("g=%s\n", g);

}

Program compiled Successfully!
continue.c======================================================================

long i;

void main()
{
	for (i=0; i<15; i= i+1) {
		printf("i=%d\n", i);
		if (i<6) {
			i = i + 1;
			continue;
		}
	}
	printf("for i=%d\n", i);

	i = 0;
	while ( i<15) {
		printf("i=%d\n", i);

		if (i<8) {
			i = i + 2;
			continue;
		}
		
		i = i+1;
	}
	printf("while i=%d\n", i);
	
	i = 0;
	do {
		printf("i=%d\n", i);

		if (i<10) {
			i = i + 2;
			continue;
		}
		
		i = i+1;
	}
	while (i<15);
	
	printf("do/while i=%d\n", i);
	
	printf("OK\n");
}

Program compiled Successfully!
div.c===========================================================================

void main()
{
	printf("88/11=%d\n", 88/11);
	printf("83%11=%d\n", 83%11);
}
Program compiled Successfully!
dowhile.c=======================================================================

long i;

void main()
{
	i = 0;
	
	do {
		printf("i=%d\n", i);
		i=i+1;
	}
	while (i<11);
		
	printf("OK\n");
}

Program compiled Successfully!
equal.c=========================================================================

void main()
{
	printf("9==8%d\n", 9==8);
	printf("9==9=%d\n", 9==9);

	printf("9!=8%d\n", 9!=8);
	printf("9!=9=%d\n", 9!=9);

}
Program compiled Successfully!
expr.c==========================================================================

void main()
{
	printf("((3*4)/2+9-7)%9=%d\n", ( (3*4)/2+9 - 7)%9);
}
Program compiled Successfully!
expr2.c=========================================================================

long g;

long compute(long a, long b) {
	long j;
	long h;
	j = g+9;
	h = (a + b)*j;
	return h;
}

void main()
{
	long j;
	g = 9;
	j = compute(2, 5);
	printf("j=%d g=%d\n", j, g);
}
Program compiled Successfully!
fact.c==========================================================================

long fact(long n) {
	if (n==0) return 1;
	return n*fact(n - 1);
}

void main()
{
	printf(" Factorial of 5 = %d\n" , fact(5));
}


Program compiled Successfully!
for.c===========================================================================

long i;

void main()
{
	for (i=0; i<15; i= i+1) {
		printf("i=%d\n", i);
	}
		
	printf("OK\n");
}

Program compiled Successfully!
global.c========================================================================

long g;

void main()
{
	g = 8;
	printf("g=%d\n", g);
}

Program compiled Successfully!
hello.c=========================================================================

void main()
{
	printf("Hello world...\n");
}

Program compiled Successfully!
if.c============================================================================

void main()
{
	if (1) {
		printf("OK1\n");
	}

	if (0) {
		printf("OK2\n");
	}

	if (1) {
		printf("OK3\n");
	}
	else {
		printf("OK4\n");
	}

	if (0) {
		printf("OK5\n");
	}
	else {
		printf("OK6\n");
	}

	printf("OK7\n");
}
Program compiled Successfully!
local.c=========================================================================


void main()
{
	long l;
	l = 6;
	printf("l=%d\n", l);
}

Program compiled Successfully!
max.c===========================================================================

long max(long* a, long n)
{
	long i;
	long m;

	m = a[0];
	for (i=0; i<n; i=i+1) {
		if (m<a[i]) {
			m = a[i];
		}
	}

	return m;
}

long* a;
long n;
long i;

void main()
{
	n = 10;

	a = malloc(10*8);

	a[0] = 8;
	a[1] = 7; 
	a[2] = 1;
	a[3] = 9;
	a[4] = 11;
	a[5] = 83;
	a[6] = 7;
	a[7] = 13;
	a[8] = 94;
	a[9] = 1;

	for (i = 0; i < n; i = i + 1) {
		printf("%d: %d\n", i, a[i]);
	}

	printf("n=%d\n", n);
	printf("max=%d\n", max(a,n));
	
}
Program compiled Successfully!
nested.c========================================================================

long h;

long compute(long a, long b, long c) {
	long d;
	d = 10;
	h = 11;
	return 2*a*a - 4*(b-c)*d - h;
}

long main()
{
	printf("compute=%d\n", compute(1, 2, 3));
}

Program compiled Successfully!
or.c============================================================================

void main()
{
	printf("0 || 0 = %d\n", 0 || 0);
	printf("0 || 1 = %d\n", 0 || 1);
	printf("1 || 0 = %d\n", 1 || 0);
	printf("1 || 1 = %d\n", 1 || 1);
}
Program compiled Successfully!
queens.c========================================================================
long* queens;
long solid;

long abs(long v) {
  if (v < 0)
        return (-1)*v;
  return v;
}

long check(long depth) {
  long i;
  for (i=0; i<depth; i=i+1) {
    if ( (queens[i] == queens[depth]) ||
         (abs(queens[i]-queens[depth]) == (depth-i)) ) {
      return 0;
    }
  }

  return 1;
}

long bruteforce(long depth) {
  if (depth==8) {
    long i;
    printf("Solution #%2ld = [ ", solid);
    solid=solid+1;
    for (i=0; i<8; i=i+1) {
      printf("%ld ", queens[i]+1);
    }
    printf("]\n");
    return 0;
  }

  long i;

  for (i=0; i<8; i=i+1) {
    queens[depth] = i;
    if (check(depth) != 0) {
      bruteforce(depth+1);
    }
  }

  return 0;
}

void main() {
  queens = malloc(8*8);
  solid = 1;
  bruteforce(0);
}


Program compiled Successfully!
quicksort.c=====================================================================


void printArray( long* a, long left, long right) {
	long i;
	for (i = left; i <= right; i = i+1) {
		printf("%d\n", a[i]);
	}
}

void print(char* s) {
	printf("==%s==\n", s);
}

long quicksortsubrange(long* a, long left, long right)
{
	if (left >= right) {
		return 0;
	}

	long x;
	x = a[right];

	long l;
	l = left;
	long g;
	g = right - 1;

	while (l<g) {
		while (l<g && a[l]<x) {
			l = l + 1;
		}

		while (l<g && a[g]>x) {
			g = g - 1;
		}

		if (l<g) {
			long tmp;
			tmp = a[l];
			a[l] = a[g];
			a[g]=tmp;
		}
	}

	a[right]=a[l];
	a[l]=x;

	quicksortsubrange(a, left, l - 1);
	quicksortsubrange(a,g+1, right);

}

void quicksort(long* a, long n) {
	quicksortsubrange(a, 0, n - 1);
}

void
main() {

	print("Hello");
	
	long n;
	n = 10;
	
	long* a;
	a = malloc(n*8);

	a[0] = 8;
	a[1] = 7;
	a[2] = 1;
	a[3] = 9;
	a[4] = 11;
	a[5] = 83;
	a[6] = 7;
	a[7] = 13;
	a[8] = 94;
	a[9] = 1;

	printf("-------- Before -------\n");
	printArray(a, 0, n - 1);
	quicksort(a, n);
	printf("-------- After -------\n");
	printArray(a, 0, n - 1);
}

Program compiled Successfully!
quicksortstr.c==================================================================


void printArray( char** a, long left, long right) {
	long i;
	for (i = left; i <= right; i = i+1) {
		printf("%d: %s\n", i, a[i]);
	}
}

void print(char* s) {
	printf("==%s==\n", s);
}

long mystrcmp(char* s1, char* s2) {
	while (s1[0] && s2[0] && s1[0] == s2[0]) {
		s1 = s1 + 1;
		s2 = s2 + 1;
	}

	if (s1[0] == 0 && s2[0] == 0) {
		return 0;
	}

	if (s1[0] == 0 && s2[0] != 0) {
		return -1;
	}
	
	if (s1[0] != 0 && s2[0] == 0) {
		return 1;
	}

	if (s1[0] > s2[0]) {
		return 1;
	}

	return -1;
	
}

long quicksortsubrange(char** a, long left, long right)
{
	if (left >= right) {
		return 0;
	}

	char* x;
	x = a[right];

	long l;
	l = left;
	long g;
	g = right - 1;

	while (l<g) {

		while (l<g && mystrcmp(a[l],x)<0) {
			l = l + 1;
		}

		while (l<g && mystrcmp(a[g],x)>=0) {
			g = g - 1;
		}

		if (l<g) {
			long tmp;
			tmp = a[l];
			a[l] = a[g];
			a[g]=tmp;
		}
	}

	a[right]=a[l];
	a[l]=x;

	quicksortsubrange(a, left, l - 1);
	quicksortsubrange(a,g+1, right);

}

void quicksort(long* a, long n) {
	quicksortsubrange(a, 0, n - 1);
}

void
main() {

	long n;
	n = 6;
	
	char** a;
	a = malloc(n*8);

	a[0] = "Rachael";
	a[1] = "Monica";
	a[2] = "Phoebe";
	a[3] = "Joey";
	a[4] = "Ross";
	a[5] = "Chandler";

	printf("-------- Before -------\n");
	printArray(a, 0, n - 1);
	quicksort(a, n);
	printf("-------- After -------\n");
	printArray(a, 0, n - 1);
}

Program compiled Successfully!
rel.c===========================================================================

void main()
{
	printf("9>8=%d\n", 9<8);
	printf("8<9=%d\n", 8<9);

	printf("9<8=%d\n", 9<8);
	printf("8<9=%d\n", 8<9);

	printf("9>=8=%d\n", 9>=8);
	printf("8>=9=%d\n", 8>=9);

	printf("9>=9=%d\n", 9>=9);
	printf("9>=9=%d\n", 9>=9);

	printf("9<=8=%d\n", 9<=8);
	printf("8<=9=%d\n", 8<=9);

	printf("9<=9=%d\n", 9<=9);
	printf("9<=9=%d\n", 9<=9);

	
}
Program compiled Successfully!
return.c========================================================================

long compute(long a, long b) {
	long x;
	x = a + b;
	return x;
}

void main()
{
	long f;
	f = compute(5, 6);
	printf("sum=%d\n", f);
}

Program compiled Successfully!
strlen.c========================================================================

long mystrlen(char* s) {
	long l;
	l = 0;

	while(s[l]) {
		l = l+1;
	}

	return l;
}

void mystrcpy(char* s1, char* s2) {
        while(s2[0]) {
		s1[0]=s2[0];
		s1 = s1 + 1;
		s2 = s2 + 1;
	}
	s1[0] = 0;
}

char* g;

void main()
{
	char* h;
	h = malloc(30);
	mystrcpy(h, "Hello world");
	printf("h=%s\n", h);
	printf("l=%d\n", mystrlen(h));

	g = malloc(30);
	strcpy(g, "This is a great course");
	printf("g=%s\n", g);
	printf("l=%d\n", mystrlen(g));

	
}
Program compiled Successfully!
sum.c===========================================================================

long sum(long n, long* a) {
	long i, s;
	s = 0;
	for (i=0; i<n; i=i+1) {
		s = s + a[i];
	}
	return s;
}

long main()
{
	long* a;
	a = malloc(5*8);
	
	a[0]=4; a[1]=3; a[2]=1; a[3]=7; a[4]= 6;
	
	long s;
	s = sum(5, a);
	
	printf("sum=%d\n", s);
}

Program compiled Successfully!
while.c=========================================================================

long i;

void main()
{
	i = 0;
	
	while (i<9) {
		printf("i=%d\n", i);
		i=i+1;
	}

	printf("OK\n");
}

Program compiled Successfully!
